//@ sourceMappingURL=server.map
// Generated by CoffeeScript 1.6.1

/*
  BEGIN server routine
*/


(function() {
  var app, createBlocks, fs, gamemap, io, model, pid, testmap, testmapH, testmapW;

  fs = require('fs');

  app = require('http').createServer(function(req, res) {
    var page;
    page = req.url === '/' ? '/index.html' : req.url;
    return fs.readFile(__dirname + page, function(err, data) {
      if (err) {
        res.writeHead(500);
        return res.end("Error loading " + page);
      } else {
        res.writeHead(200);
        return res.end(data);
      }
    });
  });

  io = require('socket.io').listen(app);

  app.listen(12345);

  /*
    END server routine
  */


  model = require('./js/model.js');

  testmap = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

  createBlocks = function(map) {
    var block, id, type, x, y, z, _i, _len, _ref, _results;
    x = 0;
    y = 0;
    id = 0;
    _ref = map.mapTemp;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      type = _ref[_i];
      if (type === 1) {
        block = new model.Block(type, x, y, id);
        map.addBlock(block);
        id++;
      } else if (type === 0) {
        z = Math.ceil(Math.random() * 3);
        if (z > 1) {
          block = new model.Block(z, x, y, id);
          map.addBlock(block);
          id++;
        }
      }
      x++;
      if (x === map.mapTempW) {
        y++;
        _results.push(x = 0);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  pid = 0;

  testmapW = 21;

  testmapH = 15;

  gamemap = new model.World();

  gamemap.addMapTemp(testmap, testmapW, testmapH);

  createBlocks(gamemap);

  io.sockets.on('connection', function(socket) {
    socket.on('quene', function(pl) {
      if (pid < 2) {
        socket.emit('in', pid);
        pid++;
        if (pid === 2) {
          return socket.broadcast.emit('start', 0);
        }
      } else if (pid >= 2) {
        return socket.emit('out', 0);
      }
    });
    socket.on('new user', function(player) {
      gamemap.addPlayer(player);
      socket.emit('add world', gamemap, player.id);
      return socket.broadcast.emit('add user', player);
    });
    socket.on('update user', function(player) {
      gamemap.addPlayer(player);
      return socket.broadcast.emit('change user', player);
    });
    return socket.on('update world', function(gblocks) {
      gamemap.blocks = gblocks;
      return socket.broadcast.emit('change world', gblocks);
    });
  });

}).call(this);
